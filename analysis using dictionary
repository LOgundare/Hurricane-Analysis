# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

def convert_damages_data(damages):
  conversion = {"M": 1000000, "B": 1000000000}
  updated_damages = []
# Update Recorded Damages
  for damage in damages:
    if damage == "Damages not recorded":
      updated_damages.append(damage)
    else:
      number = float(damage[:-1])
      suffix = damage[-1]
      updated_damages.append(number * conversion[suffix])

  return updated_damages

# test function by updating damages
updated_damages = convert_damages_data(damages)

print(updated_damages)

# 2 
# Create a Table
def create_hurricane_table(names, months, years, max_sustained_winds, areas_affected, deaths, damages):
  hurricanes = {}

  for x in range(len(names)):
    hurricane_data = {
      "Name":names[x],
      "Month":months[x],
      "Year":years[x],
      "Max Sustained Wind":max_sustained_winds[x],
      "Area Affected":areas_affected[x],
      "Damage": damages[x],
      "Death": deaths[x]
      }
    hurricanes[names[x]] = hurricane_data

  return hurricanes
# Create and view the hurricanes dictionary
hurricanes = create_hurricane_table(names, months, years, max_sustained_winds, areas_affected, deaths, damages)
print(hurricanes)

# 3
# Organizing by Year
def organize_by_year(hurricanes):
    hurricanes_by_year = {}
    for hurricane in hurricanes.values():
        year = hurricane["Year"]
        if year not in hurricanes_by_year:
            hurricanes_by_year[year] = [hurricane]
        else:
            hurricanes_by_year[year].append(hurricane)
    return hurricanes_by_year

# create a new dictionary of hurricanes with year and key
hurricanes_by_year = organize_by_year(hurricanes)
print(hurricanes_by_year[1932]) 

# 4
# Counting Damaged Areas
def counting_affected_area(hurricanes):
    damaged_areas_count = {}
    for hurricane in hurricanes.values():
        for area in hurricane["Area Affected"]: 
            if area not in damaged_areas_count:
                damaged_areas_count[area] = 1
            else: 
                damaged_areas_count[area] += 1
    return damaged_areas_count 

# create dictionary of areas to store the number of hurricanes involved in
damaged_areas_count = counting_affected_area(hurricanes)
print(damaged_areas_count)

# 5 
# Calculating Maximum Hurricane Count
def most_affected_area(damaged_areas_count):
  max_affected_area = ""
  max_affected_area_count = 0
  for area, count in damaged_areas_count.items():
    if count > max_affected_area_count:
      max_affected_area_count = count
      max_affected_area = area
  return max_affected_area, max_affected_area_count
# find most frequently affected area and the number of hurricanes involved in
max_affected_area, max_affected_area_count = most_affected_area(damaged_areas_count)
print(max_affected_area, max_affected_area_count)

# 6
# Calculating the Deadliest Hurricane
def deadliest_hurricane(hurricanes):
  deadliest_hurricane_name = ""
  max_deaths = 0
  for name, death in hurricanes.items():
    deaths = death["Death"]
    if deaths > max_deaths:
      max_deaths = deaths
      deadliest_hurricane_name = name
  return deadliest_hurricane_name, max_deaths
# find highest mortality hurricane and the number of deaths
max_deaths, deadliest_hurricane_name = deadliest_hurricane(hurricanes)
print(deadliest_hurricane(hurricanes))

# 7
# Rating Hurricanes by Mortality
def hurricane_mortality(hurricanes):
    mortality_scale = {0: 0, 1: 100, 2: 500, 3: 1000, 4: 10000}
    hurricanes_by_mortality = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}
    for name in hurricanes:
        death_numbers = hurricanes[name]["Death"]
        if death_numbers == mortality_scale[0]:
            hurricanes_by_mortality[0].append(hurricanes[name])
        elif death_numbers > mortality_scale[0] and death_numbers <= mortality_scale[1]:
            hurricanes_by_mortality[1].append(hurricanes[name])
        elif death_numbers > mortality_scale[1] and death_numbers <= mortality_scale[2]:
            hurricanes_by_mortality[2].append(hurricanes[name])
        elif death_numbers > mortality_scale[2] and death_numbers <= mortality_scale[3]:
            hurricanes_by_mortality[3].append(hurricanes[name])
        elif death_numbers > mortality_scale[3] and death_numbers <= mortality_scale[4]:
            hurricanes_by_mortality[4].append(hurricanes[name]) 
        elif death_numbers > mortality_scale[4]:
            hurricanes_by_mortality[5].append(hurricanes[name])
    return hurricanes_by_mortality

# categorize hurricanes in new dictionary with mortality severity as key
hurricanes_by_mortality = hurricane_mortality(hurricanes)
print(hurricanes_by_mortality)

# 8 Calculating Hurricane Maximum Damage
def greatest_hurricane_damage(hurricanes):
  greatest_damage_name = ""
  cost_greatest_damage = 0
  for name in hurricanes:
    if hurricanes[name]["Damage"] == "Damages not recorded":
      continue
    elif hurricanes[name]["Damage"] > greatest_damage_name:
      greatest_damage_name = name
      cost_greatest_damage = hurricanes[name]["Damage"]
  return greatest_damage_name, cost_greatest_damage

# find highest damage inducing hurricane and its total cost
greatest_damage_name, cost_greatest_damage = greatest_hurricane_damage(hurricanes)
print(greatest_hurricane_damage(hurricanes))

# 9
# Rating Hurricanes by Damage
def rate_hurricane_damage(hurricanes):
  damage_scale = {0: 0, 1: 100000000, 2: 1000000000, 3: 10000000000, 4: 50000000000}
  hurricanes_damages = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}

  for name, values in hurricanes.items():
    damage_toll = values["Damage"]

    if "M" in damage_toll:
            damage_toll = float(damage_toll[:-1]) * 1000000 
    elif "B" in damage_toll:
          damage_toll = float(damage_toll[:-1]) * 1000000000 
    if damage_toll == "Damages not recorded":
      hurricanes_damages[0].append(values)
      continue

    elif damage_toll > damage_scale[0] and damage_toll <= damage_scale[1]:
      hurricanes_damages[1].append(hurricanes[name])
    elif damage_toll > damage_scale[1] and damage_toll <= damage_scale[2]:
      hurricanes_damages[2].append(hurricanes[name])
    elif damage_toll > damage_scale[2] and damage_toll <= damage_scale[3]:
      hurricanes_damages[3].append(hurricanes[name])
    elif damage_toll > damage_scale[3] and damage_toll <= damage_scale[4]:
      hurricanes_damages[4].append(hurricanes[name])
    elif damage_toll > damage_scale[4]:
      hurricanes_damages[5].append(hurricanes[name])
  return hurricanes_damages
# categorize hurricanes in new dictionary with damage severity as key
hurricanes_damages = rate_hurricane_damage(hurricanes)
print(hurricanes_damages)
